from src.model import PayDetails, PayBenefit, Employeefrom google.appengine.ext import dbclass PayrollController:	@staticmethod	def getPayroll(id):		payDetails = PayDetails.get_by_id(id)		return payDetails			@staticmethod	def updatePayroll(payrollId,salary):		try:				payDetails = PayrollController.getPayroll(int(payrollId))			payDetails.gross_salary = float(salary)			payDetails.put()						return True		except db.TransactionFailedError:			return False				#def updatePayBenefit():						@staticmethod	def getPayrollsByEmployee(employeeId):				queryPayDetails = db.Query(PayDetails)		queryPayDetails.filter('employee =', Employee.get_by_id(employeeId).key())		rsPayDetails = queryPayDetails.fetch(1000)		return rsPayDetails				@staticmethod		def getBenefitsByPayrolls(keyListPayDetails):		queryPayBenefits = db.Query(PayBenefit)		queryPayBenefits.filter('pay_details in',keyListPayDetails)		rsPayBenefits = queryPayBenefits.fetch(1000)		return rsPayBenefits			@staticmethod	def getEmployeeBenefits(employeeId):		rsPayDetails = PayrollController.getPayrollsByEmployee(employeeId)#employeeId		lPayDetails = list([rPayDetails.key() for rPayDetails in rsPayDetails])		rsPayBenefits = PayrollController.getBenefitsByPayrolls(lPayDetails)		lEmpBen = list()		for rPayBenefit in rsPayBenefits:			for p in rPayBenefit.properties():				dPayBenefits = dict([('id',rPayBenefit.key().id()),('pay_details',getattr(rPayBenefit,p).key().id()),('benefit',rPayBenefit.benefit.key().id())])			lEmpBen.append(dPayBenefits)		dEmpBen = dict([('id',max(rsPayDetails).key().id()),											('employee',employeeId),											('salary', max(rsPayDetails).gross_salary),											('benefits', lEmpBen)])											return dEmpBen		